.container{
    border: 1px solid red;
    padding: 10px;
    margin-bottom: 20px;
    display: grid; 
    /* se colocar inline-grid, os 2 containers ficarão um ao lado do outro */
}

.item{
    background-color: aqua;
    border: 1px solid black;
}

.container-01{
    background: yellow;
    padding: 10px;
    margin-bottom: 20px;
    display: grid;
    /* cada valor é a largura de uma coluna. Podem ser utilizadas medidas relativas. */
    grid-template-columns: 200px 300px 100px;
    grid-template-rows: 300px 200px;
}

.item-01{
    background-color: rgb(241, 155, 227);
}

.item-02{
    background-color: rgb(105, 143, 226);
}

.item-03{
    background-color: rgb(75, 209, 189);
}

.item-04{
    background-color: rgb(172, 214, 87);
}

.item-05{
    background-color: rgb(172, 126, 210);
}

.item-06{
    background-color: rgb(217, 171, 111);
}

.item-07{
    background-color: rgb(107, 216, 255);
}

.container-02{
    background: rgb(135, 135, 134);
    padding: 10px;
    margin-bottom: 20px;
    height: 500px;
    display: grid;
    /* cada valor é a largura de uma coluna. Podem ser utilizadas medidas relativas. */
    /* grid-template-columns: 2fr 1fr 1fr; */
    grid-template-columns: repeat(3,1fr); /*forma elegante de dividir colunas no mesmo tamanho*/
    /* existem outros comandos, como auto-fill, auto-fit */
    /* exemplo: grid-template-columns: repeat(auto-fill); */
    /* o comando min-content vai definir o tamanho da celula pelo conteúdo mínimo com quebra de palavra */
    /* já o max-content pega todo o conteúdo em linha para definir o tamanho da célula. */
    /* no caso do rows, é preciso definir uma altura do container primeiro! 
    Ou seja,uma referência*/
    grid-template-rows: 1fr 2fr;
}

.container-03{
    background: rgb(254, 0, 0);
    padding: 10px;
    margin-bottom: 20px;
    height: 500px;
    display: grid;

    grid-template-columns: repeat(3,1fr); 
    grid-template-rows: repeat(2, 1fr);
    /* grid explicitos são aqueles que configuramos com as propriedades */
    /* grid implicito é quando ele é criado e ainda não foi configurado pelas propriedades.
    o tamanho é definido pelo conteúdo */
    grid-auto-rows: 2fr; 
    /* propriedade utilizada para quando forem criados novos elementos */
    /* o grid grid-auto-flow controla o algoritmo de reposicionamento automatico dos elementos; */
    grid-auto-flow: column;
}

.container-04{
    background: rgb(255, 119, 0);
    padding: 10px;
    margin-bottom: 20px;

    display: grid;

    grid-template-columns: repeat(3,1fr);
    grid-auto-rows: minmax(100px, auto); 
    /* pode misturar a função minmax com o repeat */

}

.container-05{
    border: 2px solid black;
    /* basicamente é trabalhar com row lines e grid lines */
    /* grid lines começam em cima e row lines começam à esquerda */
    background: rgb(255, 119, 0);

    display: grid;

    grid-template-columns: repeat(2,1fr) 4fr repeat(2,1fr);
    grid-template-rows: 50px 100px 200px;

}
.item-a{
    text-align: center;
    background-color: aqua;

    grid-column-start: 2;
    grid-column-end: 5;

    grid-row-start: 1;
    grid-row-end: 3;

}

.item-b{
    text-align: center;
    background-color: rgba(72, 255, 0, 0.695);
    grid-column-start: 1;
    grid-column-end: span 3; /* o numero é quandas celular que ele ocupa*/
    grid-row-start: 2;
    grid-row-end: span 2;

}

.item-c{
    /* usando shorthand */
    text-align: center;
    background-color: rgba(255, 0, 0, 0.695);
    grid-column: 4 /span 2;
    grid-row: 1/ span 2;
    /* pode-se nomear a linha. Ex: grid-template-columns: [primeira-linha-col] 1fr [segunda-linha-col] */

}

.container-06{
    border: 2px solid black;
    /* basicamente é trabalhar com row lines e grid lines */
    /* grid lines começam em cima e row lines começam à esquerda */
    background: rgb(255, 119, 0);

    display: grid;

    grid-template-columns: repeat(2,1fr) 4fr repeat(2,1fr);
    grid-template-rows: 50px 100px 200px;
}

.item-sh{

    /* usando shorthand */
    text-align: center;
    background-color: rgba(255, 0, 0, 0.695);
    grid-area: 1 / 2 / 3 / 5;
    /* grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end> */

}